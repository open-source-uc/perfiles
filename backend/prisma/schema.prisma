// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Member {
  username         String                  @id @unique
  telegramUsername String?
  name             String
  role             Role
  title            String?
  avatarURL        String?
  email            String
  joinedAt         DateTime
  // TODO: Make obsolete and only compute on the fly?
  // We have the full history of achievements in AchievementsOnMember
  score            Int
  level            Int
  achievements     AchievementsOnMembers[]
  Achievement      Achievement[]
  Request          Request[]
  ClaimLink        ClaimLink[]
}

model Achievement {
  id             String                  @id @unique @default(cuid())
  createdBy      Member?                 @relation(fields: [creatorUsername], references: [username])
  createdAt      DateTime
  updatedAt      DateTime                @updatedAt
  expiresAt      DateTime?
  name           String                  @unique
  description    String
  imageURL       String
  type           AchievementType
  level          AchievementLevel
  pointsOverride Int?
  members        AchievementsOnMembers[]
  creatorUsername String?
  Request        Request[]
  ClaimLink      ClaimLink[]
}

model AchievementsOnMembers {
  id             String       @id @unique @default(cuid())
  obtainedAt     DateTime
  member         Member?      @relation(fields: [memberUsername], references: [username])
  achievement    Achievement? @relation(fields: [achievementId], references: [id])
  manual         Boolean      @default(false)
  memberUsername String?
  achievementId  String?
}

model Request {
  id             String        @id @unique @default(cuid())
  achievement    Achievement   @relation(fields: [achievementId], references: [id])
  openedBy       Member?       @relation(fields: [memberUsername], references: [username])
  openedAt       DateTime
  state          RequestState?
  description    String?
  documents      Bytes[]
  achievementId  String
  memberUsername String?
}

model ClaimLink {
  id             String      @id @unique @default(cuid())
  achievement    Achievement @relation(fields: [achievementId], references: [id])
  createdBy      Member?     @relation(fields: [memberUsername], references: [username])
  createdAt      DateTime
  expiresAt      DateTime?
  shortname      String
  achievementId  String
  memberUsername String?
}

enum Role {
  // Used mostly for automation and testing
  SUPERUSER
  // Formally appointed coordinators
  COORDINATOR
  // The user is a mentor appointed by the
  // Community & Insertion coordination
  MENTOR
  //  The user is a formally appointed member
  MEMBER
  // The user is no longer a student, but remains active
  ALUMNI
  // The user is on the onboarding phase
  APLICANT
  // The user is no longer a member due to inactivity
  INACTIVE
  // The user has been suspended for some reason
  SUSPENDED
}

enum AchievementType {
  // Achieved automatically when a counter hits a certain value
  // e.g. 10 PRs merged or 5 meetins attended
  PARTICIPATION
  // The user has to submit a request to get this achievement
  BY_REQUEST
  // The achievement can only be awarded manually
  MANUAL
  // The achievement description is hidden, and only admins can manually award it to users
  MYSTERIOUS
  // The achievement is awarded automatically through the API
  // e.g when a user joins the community or when
  // he finishes some automated challenge website
  AUTOMATIC
}

enum AchievementLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum RequestState {
  // The request is open and can be claimed by a coordinator
  OPEN
  // The request is open but is awaiting a reply by the user
  WAITING_REPLY
  // The request is closed (either because he was awarded the achievement or because it was rejected)
  CLOSED
}
