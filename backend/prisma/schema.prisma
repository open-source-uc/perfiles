// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  username             String                  @id @unique
  profile              Profile?
  role                 Role
  joinedAt             DateTime
  achievements         AchievementsOnMembers[] @relation("achieves")
  created_achievements Achievement[]
  given_achievements   AchievementsOnMembers[] @relation("awards")
  created_requests     Request[]
  created_claimlinks   ClaimLink[]
  claimed_claimlinks   ClaimLinkClaim[]
}

model Profile {
  id               String  @id @unique @default(cuid())
  member           Member  @relation(fields: [memberUsername], references: [username])
  memberUsername   String  @unique
  name             String
  email            String
  title            String?
  telegramUsername String?
  avatarURL        String?
}

model Achievement {
  id              String                  @id @unique @default(cuid())
  creator         Member?                 @relation(fields: [creatorUsername], references: [username])
  creatorUsername String?
  createdAt       DateTime
  updatedAt       DateTime                @updatedAt
  expiresAt       DateTime?
  name            String                  @unique
  description     String
  imageURL        String
  type            AchievementType
  level           AchievementLevel        @relation(fields: [levelName], references: [name])
  levelName       String
  pointsOverride  Int?
  members         AchievementsOnMembers[]
  requests        Request[]
  claimlinks      ClaimLink[]
}

model AchievementsOnMembers {
  id                String      @id @unique @default(cuid())
  obtainedAt        DateTime
  member            Member      @relation("achieves", fields: [memberUsername], references: [username])
  achievement       Achievement @relation(fields: [achievementId], references: [id])
  // Whether the achievement was manually awarded by an admin
  awardedBy         Member?     @relation("awards", fields: [awardedByUsername], references: [username])
  memberUsername    String
  achievementId     String
  awardedByUsername String?
}

model Request {
  id             String        @id @unique @default(cuid())
  achievement    Achievement   @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  openedBy       Member?       @relation(fields: [memberUsername], references: [username], onDelete: Cascade)
  openedAt       DateTime
  state          RequestState?
  description    String?
  achievementId  String
  memberUsername String?
}

model ClaimLink {
  id              String           @id @unique @default(cuid())
  achievement     Achievement      @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  creator         Member?          @relation(fields: [creatorUsername], references: [username])
  createdAt       DateTime
  expiresAt       DateTime?
  shortname       String
  achievementId   String
  creatorUsername String?
  user_limit      Int?
  claims          ClaimLinkClaim[]
}

model ClaimLinkClaim {
  // This represents a claim of a claimlink by a member
  id             String    @id @unique @default(cuid())
  claimedAt      DateTime
  claimedBy      Member    @relation(fields: [memberUsername], references: [username])
  claimLink      ClaimLink @relation(fields: [claimLinkId], references: [id])
  memberUsername String
  claimLinkId    String
}

model AchievementLevel {
  name       String        @id @unique
  points      Int
  Achievement Achievement[]
}

enum Role {
  // Used mostly for automation and testing
  SERVICE
  // Formally appointed coordinators
  CHAIR
  // The user is a mentor appointed by the
  // Community & Insertion coordination
  MENTOR
  //  The user is a formally appointed member
  MEMBER
  // The user is no longer a student, but remains active
  ALUMNI
  // The user is on the onboarding phase
  APLICANT
  // The user is no longer a member due to inactivity
  INACTIVE
  // The user has been suspended for some reason
  SUSPENDED
}

enum AchievementType {
  // Achieved automatically when a counter hits a certain value
  // e.g. 10 PRs merged or 5 meetins attended
  PARTICIPATION
  // The user has to submit a request to get this achievement
  BY_REQUEST
  // The achievement can only be awarded manually
  MANUAL
  // The achievement description is hidden, and only admins can manually award it to users
  MYSTERIOUS
  // The achievement is awarded automatically through the API
  // e.g when a user joins the community or when
  // he finishes some automated challenge website
  AUTOMATIC
}

enum RequestState {
  // The request is open and can be claimed by a coordinator
  OPEN
  APPROVED
  REJECTED
}
